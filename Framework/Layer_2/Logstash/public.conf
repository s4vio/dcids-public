input {
    redis {
        host => [ "192.168.201.4" ]
        password => '##redacted##'
        key => "k8s"
        data_type => "list"
        type => "k8s"
    }
}

filter {
  grok {
    match =>  {"message" => "%{NUMBER:systemcall},%{NUMBER:timestamp},%{NOTSPACE:process_name},%{GREEDYDATA:args}?"}
  }

  if [args] {
 
    mutate {
      add_field => ["copy", "%{args}"]
    }
    
    ruby {
      code => '
        args_l = event.get("copy")
        length = args_l.length
        event.set("args_length", length)
      '
    }

    mutate {
      gsub => ["copy", "\s?(\S+=)", ";;;\1"]
    }

    ruby {
      code => '
        args_t = event.get("copy").split(";;;")
        n = args_t.length
        #puts "#{args_t}"
        #puts "#{n}"
        event.set("argc", n - 1)
        x = 0
        y = 1
        while y < n do
          #puts "#{args_t[y]}"
          event.set("[argv][#{x}]", args_t[y])
          y += 1
          x += 1
        end
      '
    }
  } else {
      mutate {
        add_field => ["argc", "0"]
        add_field => ["args_length", "0"]
      }
    }
  
  mutate {
     remove_field => ["@version", "host", "path", "type", "log", "input", "offset", "container", "ecs", "agent"]
     convert => ["timestamp", "float"]
  }
}


output {
  if "_grokparsefailure" not in [tags] {
    #stdout { codec => rubydebug }
    elasticsearch {
        hosts  => [ "192.168.201.2:9200" ]
        user => 'elastic' 
        password => '##redacted##'
        index => "public-benign"
    }
  } else {
    stdout { codec => rubydebug }
  } 
}